% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/step_epi_slide.R
\name{step_epi_slide}
\alias{step_epi_slide}
\title{Calculate a rolling window transformation}
\usage{
step_epi_slide(
  recipe,
  ...,
  .f,
  before,
  after = 0L,
  role = "predictor",
  prefix = "epi_slide_",
  skip = FALSE,
  id = rand_id("epi_slide")
)
}
\arguments{
\item{recipe}{A recipe object. The step will be added to the
sequence of operations for this recipe.}

\item{...}{One or more selector functions to choose variables
for this step. See \code{\link[recipes:selections]{recipes::selections()}} for more details.}

\item{.f}{A function in one of the following formats:
\enumerate{
\item An unquoted function name with no arguments, e.g., \code{mean}
\item A base \code{R} lambda function, e.g., \code{function(x) mean(x, na.rm = TRUE)}
\item A new-style base \code{R} lambda function, e.g., \verb{\\(x) mean(x, na.rm = TRUE)}
\item A one-sided formula like \code{~ mean(.x, na.rm = TRUE)}.
}

Note that in cases 2 and 3, \code{x} can be any variable name you like (for
example \verb{\\(dog) mean(dog, na.rm = TRUE)} will work). But in case 4, the
argument must be named \code{.x}. A common, though very difficult to debug
error is using something like \code{function(x) mean}. This will not work.}

\item{before, after}{non-negative integers.
How far \code{before} and \code{after} each \code{time_value} should
the sliding window extend? Any value provided for either
argument must be a single, non-\code{NA}, non-negative,
\link[vctrs:vec_cast]{integer-compatible} number of time steps. Endpoints of
the window are inclusive. Common settings:
\itemize{
\item For trailing/right-aligned windows from \code{time_value - time_step(k)} to
\code{time_value}, use \verb{before=k, after=0}. This is the most likely use case
for the purposes of forecasting.
\item For center-aligned windows from \code{time_value - time_step(k)} to
\code{time_value + time_step(k)}, use \verb{before=k, after=k}.
\item For leading/left-aligned windows from \code{time_value} to
\code{time_value + time_step(k)}, use \verb{after=k, after=0}.
}

You may also pass a \link[lubridate:period]{lubridate::period}, like \code{lubridate::weeks(1)}.}

\item{role}{For model terms created by this step, what analysis role should
they be assigned? \code{lag} is default a predictor while \code{ahead} is an outcome.}

\item{prefix}{A prefix to indicate what type of variable this is}

\item{skip}{A logical. Should the step be skipped when the
recipe is baked by \code{\link[=bake]{bake()}}? While all operations are baked
when \code{\link[=prep]{prep()}} is run, some operations may not be able to be
conducted on new data (e.g. processing the outcome variable(s)).
Care should be taken when using \code{skip = TRUE} as it may affect
the computations for subsequent operations.}

\item{id}{A unique identifier for the step}
}
\value{
An updated version of \code{recipe} with the new step added to the
sequence of any existing operations.
}
\description{
\code{step_epi_slide()} creates a \emph{specification} of a recipe step
that will generate one or more new columns of derived data by "sliding"
a computation along existing data.
}
\examples{
library(dplyr)
jhu <- case_death_rate_subset \%>\%
  filter(time_value >= as.Date("2021-01-01"), geo_value \%in\% c("ca", "ny"))
rec <- epi_recipe(jhu) \%>\%
  step_epi_slide(case_rate, death_rate,
    .f = ~ mean(.x, na.rm = TRUE),
    before = 6L
  )
bake(prep(rec, jhu), new_data = NULL)
}
